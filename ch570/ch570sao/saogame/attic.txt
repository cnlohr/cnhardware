#include <stdio.h>
#include <stdint.h>
#include <math.h>

int main()
{	
const float omegaPerSample = 3.1415926535/71;
	const int numSamples = 569; // enough to go from 0 to 2pi

	float coeff = 2 * cos( omegaPerSample );
	printf( "COEFF: %f\n", coeff );
	int i;

	// TRICKY: When you want a sinewave, initialize with omegaPerSample.  This
	// is crucial.  The initial state will have massive consequences.

	int sprevi = 100000; // Radius.
	int sprev2i = 0;

	for( i = 0; i <= numSamples; i++ )
	{
		int cor = (sprevi - sprev2i);
		int sir = (sprev2i + sprevi) *(3.14159/568.85);

		printf( "%d %d\n", sir, cor ); 

		//  (sprevi<<1)-(sprevi>>7)    sprevi * 1.992188 - sprev2i (or 71.065 steps/rot)
		//  (sprevi<<1)-(sprevi>>6)    sprevi * 1.984375 - sprev2i (or 50.232 steps/rot)
		//  (sprevi<<1)-(sprevi>>13)   sprevi * 1.999878 - sprev2i (or 568.85 steps/rot)
		int si = (sprevi<<1)-(sprevi>>13)-sprev2i; 
		sprev2i = sprevi;
		sprevi = si;
		// sin( omegaPerSample ) * 2048 + 1???
	}
}

// Maybe switch to https://amycoders.org/tutorials/sintables.html (at the end)

	int a = 0;
	int b = 100000;
	int64_t i;
	// If >> 5, 201.5 steps.
	// If >> 4, 101.5 steps.
	// If >> 3, 51.25 steps.
	// Similar to // https://amycoders.org/tutorials/sintables.html  (The last part of the last section)
	for( i = 0; i < 5100000000; i++ )
	{
		int lasta = a;
		int lastb = b;
		a = a + (b>>1);
		b = b - (a>>1);
		//if( !(i & 0xffff) )
		{
			int s = a*.96795; // Why .9925? if >>2
			int c = (b+lastb)/2;
			//int s = (a-b)*0.7746*0.790326405;
			//int c = (a+b)*0.790326405;
			printf( "%d %d %d\n", s, c, (int)(sqrt((float)s*(float)s+(float)c*(float)c)) );
		}
	}
